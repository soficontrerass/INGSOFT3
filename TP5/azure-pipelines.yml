trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'tp5-azure-connection'
  resourceGroup: 'tp5-ingsoft3-2025'
  backendAppQA: 'tp5-backend-qa-soficontrerass'
  backendAppPROD: 'tp5-backend-prod-soficontrerass'
  frontendAppQA: 'tp5-frontend-qa-soficontrerass'
  frontendAppPROD: 'tp5-frontend-prod-soficontrerass'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildBackend
    displayName: Build Backend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Listing repo root:"
        ls -la
        echo "Listing TP5 folder:"
        ls -la TP5 || true
      displayName: 'Repo diagnostics'
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Use Node 18'
    - script: |
        if [ -d "TP5/backend" ]; then
          cd TP5/backend
          echo "Working in $(pwd)"
          npm ci --legacy-peer-deps || npm install
        else
          echo "ERROR: TP5/backend not found"
          exit 1
        fi
      displayName: 'Install Backend dependencies'
      failOnStderr: false
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'TP5/backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/backend.zip'
        artifact: 'backend-dist'

  - job: BuildFrontend
    displayName: Build Frontend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Listing TP5/frontend folder:"
        ls -la TP5/frontend || true
      displayName: 'Repo diagnostics'
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Use Node 18'
    - script: |
        if [ -d "TP5/frontend" ]; then
          cd TP5/frontend
          echo "Working in $(pwd)"
          # asegurar instalaci√≥n de devDependencies (react-scripts)
          export NODE_ENV=development
          npm ci --include=dev --legacy-peer-deps || npm install --include=dev || npm install
          npm run build
        else
          echo "ERROR: TP5/frontend not found"
          exit 1
        fi
      displayName: 'Install & build Frontend'
      failOnStderr: false
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'TP5/frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend-dist'

- stage: Deploy_QA
  displayName: Deploy to QA
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployBackendQA
    displayName: Deploy Backend QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy backend to QA (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppQA)'
              package: '$(Pipeline.Workspace)/backend-dist/backend.zip'

  - deployment: DeployFrontendQA
    displayName: Deploy Frontend QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy frontend to QA (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(frontendAppQA)'
              package: '$(Pipeline.Workspace)/frontend-dist/frontend.zip'

- stage: Deploy_PROD
  displayName: Deploy to PROD
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - deployment: DeployBackendPROD
    displayName: Deploy Backend PROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy backend to PROD (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppPROD)'
              package: '$(Pipeline.Workspace)/backend-dist/backend.zip'

  - deployment: DeployFrontendPROD
    displayName: Deploy Frontend PROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy frontend to PROD (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(frontendAppPROD)'
              package: '$(Pipeline.Workspace)/frontend-dist/frontend.zip'