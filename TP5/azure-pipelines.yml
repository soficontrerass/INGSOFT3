trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'tp5-azure-connection'
  resourceGroup: 'tp5-ingsoft3-2025'
  backendAppQA: 'tp5-backend-qa-soficontrerass'
  backendAppPROD: 'tp5-backend-prod-soficontrerass'
  frontendAppQA: 'tp5-frontend-qa-soficontrerass'
  frontendAppPROD: 'tp5-frontend-prod-soficontrerass'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildBackend
    displayName: Build Backend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Listing repo root:"
        ls -la
        echo "Listing TP5 folder:"
        ls -la TP5 || true
      displayName: 'Repo diagnostics'
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Use Node 18'
    - script: |
        if [ -d "TP5/backend" ]; then
          cd TP5/backend
          echo "Working in $(pwd)"
          npm ci --legacy-peer-deps || npm install
        else
          echo "ERROR: TP5/backend not found"
          exit 1
        fi
      displayName: 'Install Backend dependencies'
      failOnStderr: false
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'TP5/backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/backend.zip'
        artifact: 'backend-dist'

  - job: BuildFrontend
    displayName: Build Frontend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Use Node 18'
    - script: |
        cd TP5/frontend
        echo "PWD: $(pwd)"
        # instalar todas las dependencias (incl. devDeps) y evitar fallos por peer deps
        npm install --legacy-peer-deps --no-audit --no-fund
        npm run build
      displayName: 'Install & build Frontend'
      failOnStderr: false
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'TP5/frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend-dist'

- stage: Deploy_QA
  displayName: Deploy to QA
  dependsOn: Build
  condition: succeeded()
  variables:
    - group: tp5-qa
  jobs:
  - deployment: DeployBackendQA
    displayName: Deploy Backend QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy backend to QA (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppQA)'
              package: '$(Pipeline.Workspace)/backend-dist/backend.zip'
          - task: AzureCLI@2
            displayName: 'Set backend app settings (QA)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp config appsettings set -g $(resourceGroup) -n $(backendAppQA) --settings DB_CONN="$(DB_CONN)" BACKEND_URL="$(BACKEND_URL)" NODE_ENV="$(NODE_ENV)"
          
          - script: |
              echo "Health check backend QA → $(BACKEND_URL)/health"
              for i in {1..12}; do
                status=$(curl -s -o /dev/null -w "%{http_code}" "$(BACKEND_URL)/health")
                echo "Attempt $i: $status"
                if [ "$status" = "200" ]; then echo "Health OK"; exit 0; fi
                sleep 5
              done
              echo "Health check failed"; exit 1
            displayName: 'Health check backend QA'

  - deployment: DeployFrontendQA
    displayName: Deploy Frontend QA
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy frontend to QA (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(frontendAppQA)'
              package: '$(Pipeline.Workspace)/frontend-dist/frontend.zip'
              
          - task: AzureCLI@2
            displayName: 'Set frontend app settings (QA)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp config appsettings set -g $(resourceGroup) -n $(frontendAppQA) --settings FRONTEND_URL="$(FRONTEND_URL)" BACKEND_URL="$(BACKEND_URL)" NODE_ENV="$(NODE_ENV)"

          - script: |
              echo "Health check frontend QA → $(FRONTEND_URL)"
              for i in {1..12}; do
                status=$(curl -s -o /dev/null -w "%{http_code}" "$(FRONTEND_URL)")
                echo "Attempt $i: $status"
                if [ "$status" = "200" ]; then echo "Health OK"; exit 0; fi
                sleep 5
              done
              echo "Health check failed"; exit 1
            displayName: 'Health check frontend QA'

- stage: Deploy_PROD
  displayName: Deploy to PROD
  dependsOn: Deploy_QA
  condition: succeeded()
  variables:
    - group: tp5-prod
  jobs:
  - deployment: DeployBackendPROD
    displayName: Deploy Backend PROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy backend to PROD (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(backendAppPROD)'
              package: '$(Pipeline.Workspace)/backend-dist/backend.zip'

          - task: AzureCLI@2
            displayName: 'Set backend app settings (PROD)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp config appsettings set -g $(resourceGroup) -n $(backendAppPROD) --settings DB_CONN="$(DB_CONN)" BACKEND_URL="$(BACKEND_URL)" NODE_ENV="$(NODE_ENV)"

          - script: |
              echo "Health check backend PROD → $(BACKEND_URL)/health"
              for i in {1..12}; do
                status=$(curl -s -o /dev/null -w "%{http_code}" "$(BACKEND_URL)/health")
                echo "Attempt $i: $status"
                if [ "$status" = "200" ]; then
                  echo "Health OK"
                  exit 0
                fi
                sleep 5
              done
              echo "Health check failed"
              exit 1
            displayName: 'Health check backend PROD'

  - deployment: DeployFrontendPROD
    displayName: Deploy Frontend PROD
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-dist
          - task: AzureWebApp@1
            displayName: 'Deploy frontend to PROD (Linux)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(frontendAppPROD)'
              package: '$(Pipeline.Workspace)/frontend-dist/frontend.zip'
          - task: AzureCLI@2
            displayName: 'Set frontend app settings (PROD)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp config appsettings set -g $(resourceGroup) -n $(frontendAppPROD) --settings FRONTEND_URL="$(FRONTEND_URL)" BACKEND_URL="$(BACKEND_URL)" NODE_ENV="$(NODE_ENV)"

          - script: |
              echo "Health check frontend PROD → $(FRONTEND_URL)"
              for i in {1..12}; do
                status=$(curl -s -o /dev/null -w "%{http_code}" "$(FRONTEND_URL)")
                echo "Attempt $i: $status"
                if [ "$status" = "200" ]; then echo "Health OK"; exit 0; fi
                sleep 5
              done
              echo "Health check failed"; exit 1
            displayName: 'Health check frontend PROD'